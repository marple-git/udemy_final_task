import re

from aiogram import Dispatcher
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import Message

from tgbot.config import load_config
from tgbot.keyboards.Inline.authorize import authorize_keyboard
from tgbot.keyboards.Inline.items import buy_item
from tgbot.keyboards.Inline.start import start_keyboard
from tgbot.models.items import get_item
from tgbot.models.users import User


async def start(m: Message, user: User):
    config = load_config(".env")
    if not user.admin and m.chat.id in config.tg_bot.admin_ids:
        await user.update_user(session=m.bot['db'](), updated_fields={
            'admin': True
        })
    if user.allowed:
        return await m.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', reply_markup=start_keyboard(is_admin=user.admin))
    else:
        return await m.answer('‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.\n'
                              '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø—É—Ç—è–º–∏:\n'
                              '1. –í–≤–µ—Å—Ç–∏ –∫–æ–¥\n'
                              '2. –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n'
                              '3. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã', reply_markup=authorize_keyboard())


async def start_with_ref_link(m: Message, user: User):
    if user.allowed:
        return await m.reply('‚ùóÔ∏è –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')
    args = int(m.get_args()[1:])
    referrer = await user.get_user(session=m.bot['db'](), chat_id=args)
    if not referrer:
        return await m.reply('‚ùóÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.')
    await user.update_user(session=m.bot['db'](), updated_fields={'allowed': True})
    await user.update_user(session=m.bot['db'](), updated_fields={'balance': referrer.balance + 10}, chat_id=referrer.chat_id)
    await m.bot.send_message(referrer.chat_id, f'üôà –í—ã –ø–æ–ª—É—á–∏–ª–∏ $10 –∑–∞ —Ç–æ, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {m.from_user.get_mention()}')
    return await m.reply('ü•∞ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø! –í–≤–µ–¥–∏—Ç–µ /start')


async def show_item(m: Message, user: User):
    if not user.allowed:
        return await m.answer('‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.\n'
                              '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø—É—Ç—è–º–∏:\n'
                              '1. –í–≤–µ—Å—Ç–∏ –∫–æ–¥\n'
                              '2. –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n'
                              '3. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã')
    args = m.get_args()
    item_id = int(args[1:])
    item = await get_item(session=m.bot['db'](), item_id=item_id)
    await m.answer_photo(item.photo, caption=f'‚ùóÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä ‚Ññ{item.id}\n\n'
                                             f'ü¶ã –ù–∞–∑–≤–∞–Ω–∏–µ: {item.name}\n'
                                             f'üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item.description}\n'
                                             f'üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: {item.price} —Ä—É–±.',
                                             reply_markup=buy_item(item_id=item_id))


def register_start(dp: Dispatcher):
    dp.register_message_handler(start_with_ref_link, CommandStart(deep_link=re.compile(r'u(\d+)')))
    dp.register_message_handler(show_item, CommandStart(deep_link=re.compile(r'i(\d+)')))
    dp.register_message_handler(start, CommandStart())
